"use strict";class e{_parentElement;constructor(e){this._parentElement=e,this._clear()}makeBorder(e){return`<span style="padding: 10px; margin: 10px; border: 3px solid; border-color: rgb(64, 64, 64); line-height: 5.8;">${e}</span>`}makeColor(e,t){return`<span style="color: rgb(${e[0]}, ${e[1]}, ${e[2]});">${t}</span>`}makeSize(e,t){return`<span style="font-size: ${e}px;">${t}</span>`}alignedLog(e,...t){const r=t.join(" ").split("\n").join("<br>")+"<br>",o=document.createElement("p");o.innerHTML=r,o.style=`text-align: ${e};`,this._parentElement.appendChild(o)}log(...e){this.alignedLog.apply(this,["left",...e])}logLeft(...e){this.alignedLog.apply(this,["left",...e])}logRight(...e){this.alignedLog.apply(this,["right",...e])}logCenter(...e){this.alignedLog.apply(this,["center",...e])}error(...e){this.alignedLog.apply(this,["center","ERR",...e])}_clear(){for(;this._parentElement.firstChild;)this._parentElement.removeChild(this._parentElement.lastChild)}}class t{static _wasmModule;static async load(){var e;await(e="../../build/wasm-cryptopp.js",new Promise(((t,r)=>{const o=document.createElement("script");o.src=e,o.addEventListener("load",t),o.addEventListener("error",r),document.head.appendChild(o)}))),t._wasmModule=await wasmCryptoppJs()}static get(){if(!this._wasmModule)throw new Error("crytpopp wasm module not loaded");return this._wasmModule}}const r=(e,t,r,o)=>{const a=t.length.toString();let n=0;for(;n<t.length;){let i=t.substr(n,r);n>0&&(i=i.padEnd(r,"_"));const l=e.makeColor([128,128,64],i);switch(o){case"left":e.alignedLog(o,` => {${n.toString().padStart(3,"_")} / ${a}} ${l}`);break;case"right":e.alignedLog(o,`${l} {${n.toString().padStart(3,"_")} / ${a}} <= `);break;case"center":e.alignedLog(o,`${l}`)}n+=r}};window.onload=async()=>{const o=(e=>{const t=document.querySelector(e);if(!t)throw new Error(`DOM elements not found, id: "${e}"`);return t})("#loggerOutput"),a=new e(o);a.logCenter(a.makeColor([255,0,0],"\n\nSTART\n\n")),a.logCenter("page loaded"),a.logCenter(" loading wasmCryptoppJs wasm script"),await t.load(),a.logCenter("wasmCryptoppJs wasm module loaded"),(e=>{const o=t.get();e.logCenter(e.makeColor([128,128,0],e.makeSize(30,e.makeBorder("AesSymmetricCipher test"))));const a=new o.AutoSeededRandomPoolJs;e.alignedLog("center","generate random key value");const n=a.getRandomHexStr(16);e.alignedLog("center","generate random iv value");const i=a.getRandomHexStr(16);a.delete(),e.logCenter(e.makeBorder("AesSymmetricCipher A: initialize")),e.alignedLog("left","create the AES Symmetric Cipher A");const l=new o.AesSymmetricCipherJs;e.alignedLog("left","initialize the AES Symmetric Cipher A"),l.initializeFromHexStr(n,i),e.logCenter(e.makeBorder("AesSymmetricCipher B: initialize")),e.alignedLog("right","create the AES Symmetric Cipher B");const s=new o.AesSymmetricCipherJs;e.alignedLog("right","initialize the AES Symmetric Cipher B"),s.initializeFromHexStr(n,i),e.logCenter(e.makeBorder("AesSymmetricCipher A: encrypt payload"));const d="This is my plain text message....";e.alignedLog("left",`original payload:  "${e.makeColor([64,192,64],d)}"`);const g=o.utf8ToHex(d),m=l.encryptFromHexStrAsHexStr(g);e.alignedLog("left","encrypted payload:"),r(e,m,32,"left"),e.logCenter(e.makeBorder("AesSymmetricCipher B: decrypt payload")),e.alignedLog("right","encrypted payload:"),r(e,m,32,"right");const c=s.decryptFromHexStrAsHexStr(m),C=o.hexToUtf8(c);e.alignedLog("right",`decrypted payload: "${e.makeColor([128,128,255],C)}"`),e.alignedLog("right",`original payload:  "${e.makeColor([64,192,64],d)}"`),e.logCenter(e.makeBorder("Verification")),C===d?e.alignedLog("center",`\n      ${e.makeBorder(e.makeColor([128,255,128]," => SUCCESS: ENCRYPTED PAYLOAD WAS RECOVERED!"))}\n    `):e.alignedLog("center",`\n      ${e.makeBorder(e.makeColor([255,128,128]," => FAILURE: ENCRYPTED PAYLOAD WAS NOT RECOVERED!"))}\n    `),l.delete(),s.delete(),e.logCenter(e.makeColor([128,128,0],e.makeSize(30,e.makeBorder("AesSymmetricCipher test"))))})(a),(e=>{const o=t.get();e.logCenter(e.makeColor([128,128,0],e.makeSize(30,e.makeBorder("DiffieHellmanClient test"))));const a=e.makeColor([192,128,128],"Client A"),n=e.makeColor([128,128,192],"Client B"),i=["0xB10B8F96A080E01DDE92DE5EAE5D54EC52C99FBCFB06A3C6","9A6A9DCA52D23B616073E28675A23D189838EF1E2EE652C0","13ECB4AEA906112324975C3CD49B83BFACCBDD7D90C4BD70","98488E9C219A73724EFFD6FAE5644738FAA31A4FF55BCCC0","A151AF5F0DC8B4BD45BF37DF365C1A65E68CFDA76D4DA708","DF1FB2BC2E4A4371"].join(""),l="0xF518AA8781A8DF278ABA4E7D64B7CB9D49462353",s=["0xA4D1CBD5C3FD34126765A442EFB99905F8104DD258AC507F","D6406CFF14266D31266FEA1E5C41564B777E690F5504F213","160217B4B01B886A5E91547F9E2749F4D7FBD7D3B9A92EE1","909D0D2263F80A76A6A24C087A091F531DBF0A0169B6A28A","D662A4D18E73AFA32D779D5918D08BC8858F4DCEF97C2A24","855E6EEB22B3B2E5"].join("");e.logCenter(e.makeBorder(`${a} initialize`)),e.logLeft(`${a} created`);const d=new o.DiffieHellmanClientJs;e.logLeft(`${a} generate keys`),d.generateKeys(i,l,s),e.logLeft(`${a} provide public key`);const g=d.getPublicKeyAsHexStr();e.logCenter(e.makeBorder(`${n} initialize`)),e.logRight(`${n} created`);const m=new o.DiffieHellmanClientJs;e.logRight(`${n} generate keys`),m.generateKeys(i,l,s),e.logRight(`${n} provide public key`);const c=m.getPublicKeyAsHexStr();e.logCenter(e.makeBorder(`${a} compute shared secret (with ${n} public key)`)),d.computeSharedSecretFromHexStr(c);const C=d.getSharedSecretAsHexStr();e.logLeft(`${a} computed shared secret as hexadecimal value:`),r(e,C,64,"left"),e.log(),e.logCenter(e.makeBorder(`${n} compute shared secret (with ${a} public key)`)),m.computeSharedSecretFromHexStr(g);const p=m.getSharedSecretAsHexStr();e.logRight(`${n} computed shared secret as hexadecimal value:`),r(e,p,64,"right"),e.log(),e.logCenter(e.makeBorder("verification")),C==p?e.logCenter(`\n      ${e.makeBorder(e.makeColor([128,255,128]," => SUCCESS: BOTH CLIENTS SHARE THE SAME SECRET!"))}\n    `):e.logCenter(`\n      ${e.makeBorder(e.makeColor([255,128,128]," => FAILURE: CLIENTS SECRETS ARE NOT MATCHING!"))}\n    `),d.delete(),m.delete(),e.logCenter(e.makeColor([128,128,0],e.makeSize(30,e.makeBorder("DiffieHellmanClient test"))))})(a),a.logCenter(a.makeColor([255,0,0],"\n\nSTOP\n\n"))};
