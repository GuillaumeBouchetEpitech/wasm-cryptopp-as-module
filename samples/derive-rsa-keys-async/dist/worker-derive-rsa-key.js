"use strict";var e;!function(e){e.initialize="initialize",e.create_secure_context="create_secure_context",e.derive_rsa_keys="derive_rsa_keys"}(e||(e={})),importScripts("../../../build/wasm-cryptopp.js");class a{static _wasmModule;static async load(){await a.rawLoad()}static async rawLoad(){a._wasmModule=await wasmCryptoppJs({locateFile:e=>(console.log(`url: "${e}"`),`../../../build/${e}`)})}static get(){if(!this._wasmModule)throw new Error("crytpopp wasm module not loaded");return this._wasmModule}}let t=0;const s=new Map,o=new Map([[e.initialize,async t=>{if(!(a=>a?.type===e.initialize)(t))throw new Error("invalid payload");const s=Date.now();await a.load();const o=Date.now()-s;return console.log(`worker, wasmCryptoppJs wasm module loaded (${o}ms)`),{elapsedTime:o}}],[e.create_secure_context,async o=>{if(!(a=>a?.type===e.create_secure_context)(o))throw new Error("invalid payload");const r=Date.now(),n=(()=>{t+=1;const e=`${t}`;return a.get(),s.set(e,{_data:{}}),e})();return{elapsedTime:Date.now()-r,id:n}}],[e.derive_rsa_keys,async t=>{if(!(a=>a?.type===e.derive_rsa_keys)(t))throw new Error("invalid payload");const o=Date.now(),r=(e=>{const a=s.get(e);if(!a)throw new Error(`secure context not found: "${e}"`);return a})(t.id);r._data={};const n=a.get();{r._data.password=t.password;const e="my salt",a="my info",s=332;r._data.derivedKey=n.deriveSha256HexStrKeyFromHexStrData(r._data.password,e,a,s),r._data.entropy=r._data.derivedKey.slice(0,100),r._data.nonce=r._data.derivedKey.slice(100,200),r._data.personalization=r._data.derivedKey.slice(200,300),r._data.ivValue=r._data.derivedKey.slice(300,332)}r.prng&&(r.prng.delete(),r.prng=void 0),r.prng=new n.HashDrbgRandomGeneratorJs(r._data.entropy,r._data.nonce,r._data.personalization),r.privateRsaKey&&(r.privateRsaKey.delete(),r.privateRsaKey=void 0),r.privateRsaKey=new n.RSAPrivateKeyJs,r.privateRsaKey.generateRandomWithKeySizeUsingHashDrbg(r.prng,t.keySize),r._data.privateKeyPem=r.privateRsaKey.getAsPemString(),r.publicRsaKey&&(r.publicRsaKey.delete(),r.publicRsaKey=void 0),r.publicRsaKey=new n.RSAPublicKeyJs,r.publicRsaKey.setFromPrivateKey(r.privateRsaKey),r._data.publicKeyPem=r.publicRsaKey.getAsPemString();return{elapsedTime:Date.now()-o,privateKeyPem:r._data.privateKeyPem,publicKeyPem:r._data.publicKeyPem}}]]);self.onmessage=async e=>{console.log("worker: on message"),console.log("type",e.data.type),console.log("message.data",e.data);try{const a=o.get(e.data?.type);if(!a)throw new Error(`unknown strategy "${e.data?.type}"`);const t=await a(e.data);console.log("worker: on reply"),console.log("type",e.data.type),console.log("response",t),self.postMessage({success:!0,response:t})}catch(a){console.log("worker: on reply error"),console.log("type",e.data.type),console.log("response.error",a),self.postMessage({success:!1,response:{error:a}})}};
