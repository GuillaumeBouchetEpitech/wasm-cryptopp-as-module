"use strict";class e{_parentElement;constructor(e){this._parentElement=e,this._clear()}makeBorder(e){return`<span style="padding: 10px; margin: 10px; border: 3px solid; border-color: rgb(64, 64, 64); line-height: 5.8;">${e}</span>`}makeColor(e,t){return`<span style="color: rgb(${e[0]}, ${e[1]}, ${e[2]});">${t}</span>`}makeSize(e,t){return`<span style="font-size: ${e}px;">${t}</span>`}alignedLog(e,...t){const i=t.join(" ").split("\n").join("<br>")+"<br>",n=document.createElement("p");n.innerHTML=i,n.style=`text-align: ${e};`,this._parentElement.appendChild(n)}log(...e){this.alignedLog.apply(this,["left",...e])}logLeft(...e){this.alignedLog.apply(this,["left",...e])}logRight(...e){this.alignedLog.apply(this,["right",...e])}logCenter(...e){this.alignedLog.apply(this,["center",...e])}error(...e){this.alignedLog.apply(this,["center","ERR",...e])}_clear(){for(;this._parentElement.firstChild;)this._parentElement.removeChild(this._parentElement.lastChild)}}class t{static _wasmModule;static async load(){var e;await(e="../../build/wasm-cryptopp.js",new Promise(((t,i)=>{const n=document.createElement("script");n.src=e,n.addEventListener("load",t),n.addEventListener("error",i),document.head.appendChild(n)}))),t._wasmModule=await wasmCryptoppJs()}static get(){if(!this._wasmModule)throw new Error("crytpopp wasm module not loaded");return this._wasmModule}}const i=(e,t,i,n)=>{const o=t.length.toString();let r=0;for(;r<t.length;){let a=t.substr(r,i);r>0&&(a=a.padEnd(i,"_"));const s=e.makeColor([128,128,64],a);switch(n){case"left":e.alignedLog(n,` => {${r.toString().padStart(3,"_")} / ${o}} ${s}`);break;case"right":e.alignedLog(n,`${s} {${r.toString().padStart(3,"_")} / ${o}} <= `);break;case"center":e.alignedLog(n,`${s}`)}r+=i}},n=["0x87A8E61DB4B6663CFFBBD19C651959998CEEF608660DD0F2","5D2CEED4435E3B00E00DF8F1D61957D4FAF7DF4561B2AA30","16C3D91134096FAA3BF4296D830E9A7C209E0C6497517ABD","5A8A9D306BCF67ED91F9E6725B4758C022E0B1EF4275BF7B","6C5BFC11D45F9088B941F54EB1E59BB8BC39A0BF12307F5C","4FDB70C581B23F76B63ACAE1CAA6B7902D52526735488A0E","F13C6D9A51BFA4AB3AD8347796524D8EF6A167B5A41825D9","67E144E5140564251CCACB83E6B486F6B3CA3F7971506026","C0B857F689962856DED4010ABD0BE621C3A3960A54E710C3","75F26375D7014103A4B54330C198AF126116D2276E11715F","693877FAD7EF09CADB094AE91E1A1597"].join(""),o=["0x3FB32C9B73134D0B2E77506660EDBD484CA7B18F21EF2054","07F4793A1A0BA12510DBC15077BE463FFF4FED4AAC0BB555","BE3A6C1B0C6B47B1BC3773BF7E8C6F62901228F8C28CBB18","A55AE31341000A650196F931C77A57F2DDF463E5E9EC144B","777DE62AAAB8A8628AC376D282D6ED3864E67982428EBC83","1D14348F6F2F9193B5045AF2767164E1DFC967C1FB3F2E55","A4BD1BFFE83B9C80D052B985D182EA0ADB2A3B7313D3FE14","C8484B1E052588B9B7D2BBD2DF016199ECD06E1557CD0915","B3353BBB64E0EC377FD028370DF92B52C7891428CDC67EB6","184B523D1DB246C32F63078490F00EF8D647D148D4795451","5E2327CFEF98C582664B4C0F6CC41659"].join("");var r;!function(e){e.PlainMessage="PlainMessage",e.EncryptedMessage="EncryptedMessage",e.SecurityRequest="SecurityRequest",e.SecurityResponse="SecurityResponse"}(r||(r={}));const a=e=>"object"==typeof e&&"string"==typeof e.type&&"string"==typeof e.payload;var s;!function(e){e[e.unencrypted=0]="unencrypted",e[e.initiated=1]="initiated",e[e.ready=2]="ready",e[e.confirmed=3]="confirmed"}(s||(s={}));const l=e=>"object"==typeof e&&"string"==typeof e.publicKey,c=e=>l(e)&&"string"==typeof e.ivValue;class g{_wasDeleted=!1;_communication;_EncryptedCommunicationState=s.unencrypted;_callbacks=[];_dhClient;_aesSymmetricCipher;_publicKey;_ivValue;_sharedSecret;_onLogging;constructor(e,i){this._communication=e,this._onLogging=i;const n=t.get();this._dhClient=new n.DiffieHellmanClientJs,this._aesSymmetricCipher=new n.AesSymmetricCipherJs,this._communication.onReceive((e=>{this._processReceivedMessage(e)}))}delete(){this._dhClient.delete(),this._aesSymmetricCipher.delete(),this._wasDeleted=!0}_log(e){this._onLogging&&this._onLogging(e)}_processReceivedMessage(e){if(this._wasDeleted)throw new Error("was deleted");const i=JSON.parse(e);if(!a(i))throw new Error("received message structure unrecognized");switch(this._log(`received message, type: "${i.type}"`),i.type){case r.PlainMessage:this._callbacks.forEach((e=>e(i.payload)));break;case r.EncryptedMessage:{this._log("decrypting message");const e=this._aesSymmetricCipher.decryptFromHexStrAsHexStr(i.payload);if(this._EncryptedCommunicationState===s.ready)this._log("connection now confirmed secure"),this._EncryptedCommunicationState=s.confirmed;else if(this._EncryptedCommunicationState!==s.confirmed)throw new Error("was expecting to be in a secure state");const n=t.get().hexToUtf8(e);this._log("message decrypted"),this._callbacks.forEach((e=>e(n)));break}case r.SecurityRequest:{this._log("now securing the connection"),this._EncryptedCommunicationState=s.initiated;const e=JSON.parse(i.payload);if(!c(e))throw new Error("received message security request payload unrecognized");this._ivValue=e.ivValue,this._generateDiffieHellmanKeys(),this._initializeAesSymmetricCipher(e.publicKey),this._log("sending public key"),this._EncryptedCommunicationState=s.ready;const t=JSON.stringify({publicKey:this._publicKey});this._communication.send(JSON.stringify({type:r.SecurityResponse,payload:t}));break}case r.SecurityResponse:{if(this._log("processing received security response"),this._EncryptedCommunicationState!==s.initiated)throw new Error("was expecting a security response");this._log("computing the shared secret with the received public key");const e=JSON.parse(i.payload);if(!l(e))throw new Error("received message security response payload unrecognized");this._initializeAesSymmetricCipher(e.publicKey),this._log("connection now confirmed secure"),this._EncryptedCommunicationState=s.ready;break}default:throw new Error(`received message type unsupported, type: "${i.type}"`)}}_generateDiffieHellmanKeys(){this._log("------------------------------------"),this._log("Diffie Hellman Key Exchange"),this._log("generating public/private keys"),this._log("2048-bit MODP Group with 256-bit Prime Order Subgroup"),this._dhClient.generateKeys(n,"0x8CF83642A709A097B447997640129DA299B1A47D1EB3750BA308B0FE64F5FBD3",o),this._publicKey=this._dhClient.getPublicKeyAsHexStr(),this._log("generated public/private keys"),this._log("------------------------------------")}_initializeAesSymmetricCipher(e){this._dhClient.computeSharedSecretFromHexStr(e),this._sharedSecret=this._dhClient.getSharedSecretAsHexStr(),this._log("------------------------------------"),this._log("AES Symmetric Cipher"),this._log("initializing"),this._log("256bits key from computed shared secret"),this._aesSymmetricCipher.initializeFromHexStr(this._sharedSecret.slice(0,64),this._ivValue),this._log("initialized"),this._log("------------------------------------")}makeSecure(){if(this._wasDeleted)throw new Error("was deleted");this._log("now securing the connection"),this._EncryptedCommunicationState=s.initiated,this._generateDiffieHellmanKeys();const e=new(t.get().AutoSeededRandomPoolJs);this._ivValue=e.getRandomHexStr(16),e.delete();const i=JSON.stringify({publicKey:this._publicKey,ivValue:this._ivValue});this._communication.send(JSON.stringify({type:r.SecurityRequest,payload:i}))}send(e){if(this._wasDeleted)throw new Error("was deleted");if(this._EncryptedCommunicationState===s.initiated)throw new Error("cannot send while securing the connection");if(this._EncryptedCommunicationState===s.unencrypted)this._log("[unencrypted] sending a message:"),this._log(`[unencrypted] "${e}"`),this._communication.send(JSON.stringify({type:r.PlainMessage,payload:e}));else{this._log("[encrypted] sending a message:"),this._log(`[encrypted] "${e}"`);const i=t.get().utf8ToHex(e),n=this._aesSymmetricCipher.encryptFromHexStrAsHexStr(i);this._communication.send(JSON.stringify({type:r.EncryptedMessage,payload:n}))}}onReceive(e){if(this._wasDeleted)throw new Error("was deleted");this._callbacks.push(e)}get EncryptedCommunicationState(){if(this._wasDeleted)throw new Error("was deleted");return this._EncryptedCommunicationState}}window.onload=async()=>{const n=(e=>{const t=document.querySelector(e);if(!t)throw new Error(`DOM elements not found, id: "${e}"`);return t})("#loggerOutput"),o=new e(n);o.logCenter("page loaded"),o.logCenter(o.makeColor([255,0,0],"\n\nSTART\n\n")),o.logCenter("CrytpoppWasmModule: loading"),await t.load(),o.logCenter("CrytpoppWasmModule: loaded"),(e=>{e.logCenter(e.makeColor([128,128,0],e.makeSize(30,e.makeBorder("Secure Connection Test"))));const t=e.makeColor([192,128,128],"Client A"),n=e.makeColor([128,128,192],"Client B"),o=(t,n)=>{const o=JSON.parse(n);if(a(o)){if(o.type===r.PlainMessage?e.alignedLog(t,e.makeColor([192,64,64],"/!\\ UNENCRYPTED MESSAGE /!\\")):o.type===r.EncryptedMessage?e.alignedLog(t,e.makeColor([64,192,64],"(OK) ENCRYPTED MESSAGE (OK)")):o.type!==r.SecurityRequest&&o.type!==r.SecurityResponse||e.alignedLog(t,e.makeColor([64,192,64],"(OK) NO COMPROMISING INFORMATION SHARED (OK)")),e.alignedLog(t,"type:"),e.alignedLog(t,e.makeColor([192,192,64],`"${o.type}"`)),o.type===r.PlainMessage)e.alignedLog(t,"payload:"),e.alignedLog(t,e.makeColor([192,64,64],e.makeSize(25,`"${o.payload}"`)));else try{const n=JSON.parse(o.payload);c(n)?(e.alignedLog(t,"payload.publicKey:"),i(e,n.publicKey,64,t),e.alignedLog(t,"payload.ivValue:"),i(e,n.ivValue,64,t)):l(n)?(e.alignedLog(t,"payload.publicKey:"),i(e,n.publicKey,64,t)):(e.alignedLog(t,"payload:"),i(e,o.payload,64,t))}catch{e.alignedLog(t,"payload:"),i(e,o.payload,64,t)}o.type===r.PlainMessage?e.alignedLog(t,e.makeColor([192,64,64],"/!\\ UNENCRYPTED MESSAGE /!\\")):o.type===r.EncryptedMessage?e.alignedLog(t,e.makeColor([64,192,64],"(OK) ENCRYPTED MESSAGE (OK)")):o.type!==r.SecurityRequest&&o.type!==r.SecurityResponse||e.alignedLog(t,e.makeColor([64,192,64],"(OK) NO COMPROMISING INFORMATION SHARED (OK)"))}else e.alignedLog(t,`"${n}"`)},s=[],d=[i=>{e.alignedLog("left",`SecureClient ${t} received a message`),e.alignedLog("left","\n")}],h={send:i=>{e.alignedLog("left",`SecureClient ${t} sent a message`),e.alignedLog("left","\n"),e.alignedLog("center",`${t} -----\x3e ${n}`),e.alignedLog("center","\n"),o("center",i),e.alignedLog("center","\n"),e.alignedLog("center",`${t} -----\x3e ${n}`),e.alignedLog("center","\n"),s.push(i)},onReceive:e=>{d.push(e)}},p=[],m=[t=>{e.alignedLog("right",`SecureClient ${n} received a message`),e.alignedLog("right","\n")}],y={send:i=>{e.alignedLog("right",`SecureClient ${n} sent a message`),e.alignedLog("right","\n"),e.alignedLog("center",`${t} <----- ${n}`),e.alignedLog("center","\n"),o("center",i),e.alignedLog("center","\n"),e.alignedLog("center",`${t} <----- ${n}`),e.alignedLog("center","\n"),p.push(i)},onReceive:e=>{m.push(e)}};e.logCenter(e.makeBorder("initialize")),e.logLeft(`${t} created`);const C=new g(h,(t=>e.logLeft(t)));C.onReceive((i=>{e.alignedLog("left",`${t} received:`),e.alignedLog("left",e.makeColor([64,192,64],e.makeSize(25,`"${i}"`))),e.alignedLog("left","\n")})),e.logRight(`${n} created`);const u=new g(y,(t=>e.logRight(t)));u.onReceive((t=>{e.alignedLog("right",`${n} received:`),e.alignedLog("right",e.makeColor([64,192,64],e.makeSize(25,`"${t}"`))),e.alignedLog("right","\n")})),e.logCenter(e.makeBorder("[unencrypted] Client A send to Client B")),e.logLeft(`${t} now sending a message:`);const E="Hello, is this safe?";e.alignedLog("left",e.makeColor([64,192,64],e.makeSize(25,`"${E}"`))),e.log("\n"),C.send(E),s.forEach((e=>{m.forEach((t=>t(e)))})),s.length=0,e.logCenter(e.makeBorder("[unencrypted] Client B send to Client A")),e.logRight(`${n} now sending a message:`);const _="Hi, no... it isn't safe...";for(e.alignedLog("right",e.makeColor([64,192,64],e.makeSize(25,`"${_}"`))),e.log("\n"),u.send(_),p.forEach((e=>{d.forEach((t=>t(e)))})),p.length=0,e.logCenter(e.makeBorder("Client A send request for encryption to Client B")),C.makeSecure();0!==s.length||0!==p.length;)s.forEach((e=>{m.forEach((t=>t(e)))})),s.length=0,p.forEach((e=>{d.forEach((t=>t(e)))})),p.length=0;e.logCenter(e.makeBorder("Client B sent a reply for encryption to Client B")),e.logCenter(e.makeBorder("Both Client A and Client B can now encrypt/decrypt each other messages")),e.logCenter(e.makeBorder("[encrypted] Client A send to Client B")),e.logLeft(`${t} now sending a message:`);const B="Let's try again, safe now?";e.alignedLog("left",e.makeColor([64,192,64],e.makeSize(25,`"${B}"`))),e.log("\n"),C.send(B),s.forEach((e=>{m.forEach((t=>t(e)))})),e.logCenter(e.makeBorder("[encrypted] Client B send to Client A")),e.logRight(`${n} now sending a message:`);const S="I'd say we're pretty safe right now :)";e.alignedLog("right",e.makeColor([64,192,64],e.makeSize(25,`"${S}"`))),e.log("\n"),u.send(S),p.forEach((e=>{d.forEach((t=>t(e)))})),C.delete(),u.delete(),e.logCenter(e.makeColor([128,128,0],e.makeSize(30,e.makeBorder("Secure Connection Test"))))})(o),o.logCenter(o.makeColor([255,0,0],"\n\nSTOP\n\n"))};
